var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This section offers a concise and user-friendly guide to effectively utilize GeneralizedTransferMatrixMethod.jl. ","category":"page"},{"location":"gettingstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The latest version of GeneralizedTransferMatrixMethod.jl can be installed via the built-in package manager. In the Julia REPL, press ] to access the package manager and run","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"pkg> add GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Updates can be installed similarly using the up command","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"pkg> up GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"warn: Julia version\nIt is recommended to use a recent Julia version. This package was tested on Julia v1.7 and onwards, but does not provide any backwards compatibility.","category":"page"},{"location":"gettingstarted/#Tutorial","page":"Getting Started","title":"Tutorial","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This tutorial goes through some simple examples to explain the key features of  GeneralizedTransferMatrixMethod.jl.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Unitful.jl integration\nIn this tutorial we all input parameters are given in SI units. This package supports the use of arbitrary units using the Unitful.jl packages. For more information see Unitful.jl integration.","category":"page"},{"location":"gettingstarted/#Glass–Air-interface","page":"Getting Started","title":"Glass–Air interface","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using GeneralizedTransferMatrixMethod\nusing Plots\n\ndefault(\n    lw=2, \n    label=:none,\n    titlefontsize=18,\n    guidefontsize=18,\n    tickfontsize=16,\n    legendfontsize=12,\n    framestyle=:box,\n    grid=false,\n    bottom_margin=10Plots.mm,\n    left_margin=10Plots.mm,\n    right_margin=10Plots.mm,\n)\ngr()","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We should now be able to load the package","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We first have to define the materials we want to use. While there are a few materials included in the package (Au, Ag, SiC, MoO₃, ...), we start by defining the permittivities from scratch. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For this we use the @permittivity macro. This macro expects the name of the material we want to define and a function that takes the wavelength λ in meters and returns the full permittivity tensor.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"A simple example would be to define Glass with a constant permittivity of 1.5","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using LinearAlgebra\n\n@permittivity \"Glass\" λ -> Diagonal(ones(3)) * 1.5\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We first load the LinearAlgebra standard library to have access to the function Diagonal, so we don't have to write out the 3 times 3 diagonal matrix ourselves. In this example we passed a anonymous function (-> syntax)to the permittivity macro, but we could have also defined the function beforehand","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"f(λ) = Diagonal(ones(3)) * 1.5\n\n@permittivity \"Glass\" f","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The macro has defined a function called \"Glass,\" which returns a structure of type Layer. Additionally, it has created a function ϵ_Glass, which is identical to the input function we provided.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Glass()","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To calculate the reflection of a Glass–Air interface, we must define an Air layer. To accomplish this, we can simply invoke the Layer function without providing any arguments. This will create a Layer with a constant permittivity of 1","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Air = Layer()","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"With these two layers, we can now build up a LayeredStructure ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Interface = LayeredStructure(\n    superstrate = Glass(),\n    substrate = Air\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can now calculate the transfer matrix of our interface for a given wavelength λ and angle of incidence α","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"λ = 1.55e-6 # [m]\nα = deg2rad(10) # [rad]\nζ = sin(α) * sqrt(ϵ_Glass(λ)[1,1])\n\nProperties = calculate_structure_properties(ζ, λ, Interface)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Instead of the angle of incidence α the function calculate_structure_properties actually takes the reduced in-plane wave vector ζ as an input. This structure of type StructureProperties contains the full transfer matrix Γ (denoted as Gamma^* in reference [3]). ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Properties.Γ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"It also contains all the parameters calculated along the way for each individual layer","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Properties.superstrate","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can now calculate the reflection and transmission from these properties","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = reflection(Properties)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Tₚ, Tₛ = transmission(ζ, Properties)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"danger: Transmission modes\nSince it is not generally possible to separate the modes in birefringent media, the transmission function calculates the transmission only considering the input polarization (for more details see reference [5]). In cases where it is possible, one can use the transmission_coeffs function to calculate the transmission.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can now calculate the angular dependence of the reflection of our interface by replacing the incident angle α by a list of angles","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"λ = 1.55e-6 # [m]\nα = deg2rad.(0:0.1:89) # [rad]\nζ = sin.(α) * sqrt(ϵ_Glass(λ)[1,1])\n\nProperties = calculate_structure_properties.(ζ, Ref(λ), Ref(Interface))\nR = reflection.(Properties)\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Broadcasting\nTo make sure we only broadcast over the reduced in-plane wave vectors ζ we use the Ref command to specify which quantities should not be used for broadcasting. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We now have a list of tupels R, where each element has the shape (Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ). If we want to split them into separate lists, we can use the Unzip.jl package","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Unzip\n\nRₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = unzip(R)\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Finally to visualize our results, we use Plots.jl","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Plots\n\nplot(\n    rad2deg.(α), [Rₚₚ Rₛₛ], \n    label = [\"Rₚₚ\" \"Rₛₛ\"],\n    xlabel = \"Angle of incidence (°)\", ylabel = \"Reflection\"\n)","category":"page"},{"location":"gettingstarted/#Half-wave-plate-with-anti-reflection-coating","page":"Getting Started","title":"Half-wave plate with anti-reflection coating","text":"","category":"section"},{"location":"parallelization/#Parallelization","page":"Parallelization","title":"Parallelization","text":"","category":"section"},{"location":"unitful/#Unitful.jl-integration","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"","category":"section"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using Plots\n\ndefault(\n    lw=2, \n    label=:none,\n    titlefontsize=18,\n    guidefontsize=18,\n    tickfontsize=16,\n    legendfontsize=12,\n    framestyle=:box,\n    grid=false,\n    bottom_margin=10Plots.mm,\n    left_margin=10Plots.mm,\n    right_margin=10Plots.mm,\n)\ngr()","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"GeneralizedTransferMatrixMethod.jl automatically loads and reexports Unitful.jl. This way all input parameters can be specified using the units supported by Unitful.jl","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using LinearAlgebra\n\nusing GeneralizedTransferMatrixMethod\n# Import most common units \nusing Unitful: °, nm, μm, mm, m","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"We simulate a slab of a uniaxial crystal in air as an illustrative example","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Air = Layer()\n\nnₒ(λ) = 3\nnₑ(λ) = 1.5\n\n@permittivity \"Mat\" λ -> Diagonal([nₒ(λ), nₑ(λ), nₒ(λ)].^2)\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"We can define all input parameters using Unitful.jl quantities","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"α = 30°\nζ = sin(α)\nϕ = 45°\nd = 183nm\n\nλ = (500:0.1:600)nm\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"and pass them to setup the LayeredStructure","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Stack = LayeredStructure(\n    superstrate = Air,\n    layers = [Mat(d = d, ϕ = ϕ)],\n    substrate = Air\n)\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"and use them to calculate its properties","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Properties = [calculate_structure_properties(ζ, λᵢ, Stack) for λᵢ ∈ λ]\n\nusing Unzip\n\nRₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = unzip(reflection.(Properties))\n\nT(prop) = abs2.(transmission_coeffs(prop))\nTₚₚ, Tₛₛ, Tₚₛ, Tₛₚ = unzip(T.(Properties))\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Units get automatically added to the axis labels in Plots.jl","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using Plots\n\np1 = plot(\n    λ, [Rₚₚ Rₛₛ Rₚₛ Rₛₚ], \n    label = [\"Rₚₚ\" \"Rₛₛ\" \"Rₚₛ\" \"Rₛₚ\"],\n    xlabel = \"Wavelength\",\n    ylabel = \"Reflection\",\n    ls = [:solid :dash],\n    size = (800,300)\n)\np2 = plot(\n    λ, [Tₚₚ Tₛₛ Tₚₛ Tₛₚ], \n    label = [\"Tₚₚ\" \"Tₛₛ\" \"Tₚₛ\" \"Tₛₚ\"],\n    xlabel = \"Wavelength\",\n    ylabel = \"Transmission\",\n    ls = [:solid :dash],\n    size = (800,300)\n)\nplot(p1,p2)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"library-internal/#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"library-internal/#Functions","page":"Internal","title":"Functions","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.eigen_trans_ref\nGeneralizedTransferMatrixMethod.eigen_sorted\nGeneralizedTransferMatrixMethod.poynting_vector\nGeneralizedTransferMatrixMethod.C_p\n\nGeneralizedTransferMatrixMethod.lorentz_osc\nGeneralizedTransferMatrixMethod.ϵ_drude\n\nGeneralizedTransferMatrixMethod.ϵ_x_MoO₃\nGeneralizedTransferMatrixMethod.ϵ_y_MoO₃\nGeneralizedTransferMatrixMethod.ϵ_z_MoO₃","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.eigen_trans_ref","page":"Internal","title":"GeneralizedTransferMatrixMethod.eigen_trans_ref","text":"eigen_trans_ref(Δ)\n\nReturn the four eigenvalues and vectors of the Δ matrix sorted by propagation direction.\n\nThe first two entries represent the forward propagating (transmitted) waves, the last two entries the backward propagating (reflected) waves.\n\nInput\n\nΔ – Square matrix.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.eigen_sorted","page":"Internal","title":"GeneralizedTransferMatrixMethod.eigen_sorted","text":"eigen_sorted(ζ, ϵ, μ, Δ)\n\nReturn the sorted eigenvalues, eigenvectors, and Poynting vectors of Δ(ζ, ϵ, μ).\n\nInput\n\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\nΔ – Δ matrix.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.poynting_vector","page":"Internal","title":"GeneralizedTransferMatrixMethod.poynting_vector","text":"poynting_vector(Ψ, ζ, ϵ, μ)\n\nCalculate the Poynting vector from the eigenvector Ψ of Δ.\n\nInput\n\nΨ – Eigenvector of Δ of the form (Ex, Hy, Ey, -Hx)ᵀ.\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.C_p","page":"Internal","title":"GeneralizedTransferMatrixMethod.C_p","text":"C_p(F₁, F₂)\n\nCalculate the ordering parameter C from for two quantities F₁ and F₂.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.lorentz_osc","page":"Internal","title":"GeneralizedTransferMatrixMethod.lorentz_osc","text":"lorentz_osc(f, fₗₒ, fₜₒ, γ)\n\nCalculate a single lorentz oscillator (without ϵ∞).\n\nInput\n\nf   – Frequency.\nfₗₒ – Frequency of the longitudinal optical phonon.\nfₜₒ – Frequency of the transverse optical phonon.\nγ   – Damping factor of the Lorentzian line shape.\n\nReference\n\nThe definition is taken from Álvarez-Pérez 2020.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_drude","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_drude","text":"ϵ_drude(ω, ωₚ, γ)\n\nCalculate the permitivity from Drude model.\n\nInput\n\nf  – Frequency.\nfₚ – Plasma frequency.\nγ  – Mean collision rate.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_x_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_x_MoO₃","text":"ϵ_x_MoO₃(λ)\n\nCalculate the x principal component of the permitivity tensor of MoO₃.\n\nInput\n\nλ – Wavelength [m].\n\nReference\n\nThe parameters are taken from Álvarez-Pérez 2020.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_y_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_y_MoO₃","text":"ϵ_y_MoO₃(λ)\n\nCalculate the y principal component of the permitivity tensor of MoO₃.\n\nInput\n\nλ – Wavelength [m].\n\nReference\n\nThe parameters are taken from Álvarez-Pérez 2020.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_z_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_z_MoO₃","text":"ϵ_z_MoO₃(λ)\n\nCalculate the z principal component of the permitivity tensor of MoO₃.\n\nInput\n\nλ – Wavelength [m].\n\nReference\n\nThe parameters are taken from Álvarez-Pérez 2020.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#Matrices","page":"Internal","title":"Matrices","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.Λ\nGeneralizedTransferMatrixMethod.euler_mat\nGeneralizedTransferMatrixMethod.M_mat\nGeneralizedTransferMatrixMethod.a_mat\nGeneralizedTransferMatrixMethod.Δ_mat\nGeneralizedTransferMatrixMethod.γ_mat\nGeneralizedTransferMatrixMethod.dynamical_mat\nGeneralizedTransferMatrixMethod.propagation_mat","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.Λ","page":"Internal","title":"GeneralizedTransferMatrixMethod.Λ","text":"Λ\n\nΛ matrix (see reference). Changes the order of the Γ matrix to follow Yeh's formalism.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.euler_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.euler_mat","text":"euler_mat(θ, ϕ, ψ)\n\nCalculate the Euler matrix from the Euler angles θ, ϕ, and ψ.\n\n\n\n\n\n    euler_mat(layer::Layer)\n\nCalculate the Euler matrix for a Layer.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.M_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.M_mat","text":"M_mat(ϵ, μ)\n\nCalculate the M matrix (see reference).\n\nInput\n\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\n\nNotes\n\nOnly non-optically active media with isotropic permeability are considered:\n\nbarmu = mubar1 quad\nbarrho_1 = barrho_2 = bar0\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.a_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.a_mat","text":"a_mat(M, ζ)\n\nCalculate the a matrix (see reference).\n\nInput\n\nM – 6x6 M matrix (see reference).\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.Δ_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.Δ_mat","text":"Δ_mat(ζ, ϵ, μ, M, a)\n\nCalculate the Δ matrix (see reference).\n\nInput\n\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\nM – M matrix.\na – a matrix.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.γ_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.γ_mat","text":"γ_mat(q, ζ, ϵ, μ)\n\nCalculate the normalized γ vectors and return them in matrix form.\n\nInput\n\nq – Sorted eigenvalues of Δ.\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\n\nNotes\n\nThe field vectors are given by the rows of the matrix, so the indexing scheme follows the one in the references.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.dynamical_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.dynamical_mat","text":"dynamical_mat(q, ζ, ϵ, μ γ)\n\nCalculate the dynamical matrix A of an interface. Returns an array of type SMatrix for faster matrix operations.\n\nInput\n\nq – Sorted eigenvalues of Δ.\nζ – In-plane reduced wavevector kₓ/k₀ in the system.\nϵ – 3x3 permitivity tensor in the lab frame.\nμ – Scalar permeability.\nγ – γ Matrix.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.propagation_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.propagation_mat","text":"propagation_mat(q, λ, d)\n\nCalculate the propagation matrix P. Returns an array of type SMatrix for faster matrix operations.\n\nInput\n\nq – Sorted eigenvalues of Δ.\nλ – Wavelength [m].\nd – Thickness of the material [m].\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Public","page":"Public","title":"Public","text":"","category":"section"},{"location":"library-public/#Exported-macros","page":"Public","title":"Exported macros","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"@permittivity","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.@permittivity","page":"Public","title":"GeneralizedTransferMatrixMethod.@permittivity","text":"permmittivity(name, func)\n\nThis macro takes the name of a material and the permittivity func, depending on λ and returning the permittivity matrix. It generates the permittivity funcion ϵ_Name and the Layer function Name.\n\nNote\n\nThe first letter of the name is always capitalised.\n\n\n\n\n\n","category":"macro"},{"location":"library-public/#Exported-functions","page":"Public","title":"Exported functions","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"calculate_layer_properties\ncalculate_structure_properties\nreflection\ntransmission\nreflection_coeffs\ntransmission_coeffs","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.calculate_layer_properties","page":"Public","title":"GeneralizedTransferMatrixMethod.calculate_layer_properties","text":"calculate_layer_properties(layer::Layer, ζ::Real, λ::Real)\n\nCalculate the properties of a single layer in a layered structure and returns a struct of type LayerProperties.\n\nInput\n\nlayer – Layer.\nζ     – In-plane reduced wavevector kₓ/k₀ in the system.\nλ     – Wavelength [m].\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.calculate_structure_properties","page":"Public","title":"GeneralizedTransferMatrixMethod.calculate_structure_properties","text":"calculate_structure_properties(ζ::Real, λ::Real, strct::LayeredStructure)\n\nCalculate the properties of a layered structure and returns a struct of type StructureProperties.\n\nInput\n\nζ     – In-plane reduced wavevector kₓ/k₀ in the system.\nλ     – Wavelength [m].\nstrct – Layered structure.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\ncalculate_structure_properties(ζ::Real, λ::Unitful.Length,\n                               strct::LayeredStructure)\n\nCalculate the properties of a layered structure using Unitful quantities and returns a struct of type StructureProperties.\n\nInput\n\nζ     – In-plane reduced wavevector kₓ/k₀ in the system.\nλ     – Wavelength.\nstrct – Layered structure.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.reflection","page":"Public","title":"GeneralizedTransferMatrixMethod.reflection","text":"reflection(r)\n\nCalculate the reflection from the reflection coefficient. (Just square moduli)\n\nInput\n\nr – Reflection coefficient.\n\n\n\n\n\nreflection(props::StructureProperties)\n\nCalculate the reflection from a StructureProperties type. Returns the reflection for different polarisations in the order Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ.\n\nInput\n\nprops – Layered material reperesented by a StructureProperties type.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.transmission","page":"Public","title":"GeneralizedTransferMatrixMethod.transmission","text":"transmission(ζ, props::StructureProperties)\n\nCalculate the total transmission from a StructureProperties type. Returns the transmission in the order Tₚ, Tₛ, where the indices indicate the incoming polarisation.\n\nInput\n\nζ     – In-plane reduced wavevector kₓ/k₀ of the system.\nprops – Layered material reperesented by a StructureProperties type.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.reflection_coeffs","page":"Public","title":"GeneralizedTransferMatrixMethod.reflection_coeffs","text":"reflection_coeffs(Γ)\n\nCalculate the reflection coefficients from the full transfer matrix Γ (Γ* in the reference). Returns the reflection coefficients in the order rₚₚ, rₛₛ, rₚₛ, rₛₚ.\n\nInput\n\nΓ – Full transfer matrix in Yeh's formalism.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\nreflection_coeffs(props::StructureProperties)\n\nCalculate the reflection coefficients from a StructureProperties type. Returns the reflection coefficients for different polarisations in the order rₚₚ, rₛₛ, rₚₛ, rₛₚ.\n\nInput\n\nprops – Layered material reperesented by a StructureProperties type.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.transmission_coeffs","page":"Public","title":"GeneralizedTransferMatrixMethod.transmission_coeffs","text":"transmission_coeffs(Γ)\n\nCalculate the transmission coefficients from the full transfer matrix Γ (Γ* in the reference). Returns the reflection coefficients in the order tₚₚ, tₛₛ, tₚₛ, tₛₚ.\n\nInput\n\nΓ – Full transfer matrix in Yeh's formalism.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\ntransmission_coeffs(props::StructureProperties)\n\nCalculate the transmission coefficients from a StructureProperties type. Returns the transmission coefficients for different polarisations in the order tₚₚ, tₛₛ, tₚₛ, tₛₚ.\n\nInput\n\nprops – Layered material reperesented by a StructureProperties type.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Exported-types","page":"Public","title":"Exported types","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"Layer\nLayeredStructure\nLayerProperties\nStructureProperties","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Layer","page":"Public","title":"GeneralizedTransferMatrixMethod.Layer","text":"struct Layer\n    ϵ::Function\n    d::Real\n    θ::Real\n    ϕ::Real\n    ψ::Real\nend\n\nType that represents a layer in a layered structur. Boundary layers have d = 0.\n\nFields\n\nϵ – Permitivity tensor in diagonal form (default: ϵ_vacuum).\nd – Thickness of the layer [m] (default: 0).\nθ – θ Euler angle [rad] (default: 0).\nϕ – ϕ Euler angle [rad] (default: 0).\nψ – ψ Euler angle [rad] (default: 0).\n\nReference\n\nThe definition of the Euler matrix is taken from Optical Waves in Layered Media by Pochi Yeh.\n\n\n\n\n\n","category":"type"},{"location":"library-public/#GeneralizedTransferMatrixMethod.LayeredStructure","page":"Public","title":"GeneralizedTransferMatrixMethod.LayeredStructure","text":"struct LayeredStructure\n    superstrate::Layer\n    layers::AbstractVector{Layer}\n    substrate::Layer\nend\n\nType that represents a layered structure.\n\nFields\n\nsuperstrate – Superstrate of the structure.\nlayers      – List of layers of the structure starting with the layer                underneath the superstrate and ending with the layer above the                substrate (default = []).\nsubstrate   – Subststrate of the structure.\n\n\n\n\n\n","category":"type"},{"location":"library-public/#GeneralizedTransferMatrixMethod.LayerProperties","page":"Public","title":"GeneralizedTransferMatrixMethod.LayerProperties","text":"struct LayerProperties\n    T::AbstractMatrix\n    P::AbstractMatrix\n    A::AbstractMatrix\n    γ::AbstractMatrix\n    q::AbstractVector\n    Ψ::AbstractVector\n    S::AbstractVector\n    Δ::AbstractMatrix\n    a::AbstractMatrix\n    M::AbstractMatrix\nend\n\nType that holds all properties of a single layer in a structure. For boundary layers P and T are identity matrices.\n\nThe properties of this type only make sense in combination with the wavelength λ and the normalized in-plane wavevector component ζ.\n\nFields\n\nT – Transmission matrix of the layer.\nP – Progation matrix of the layer.\nA – Dynamical matrix of the layer.\nγ – Normalized γ vectors in matrix form.\nq – Four eigenvalues (z-components of the wavevector) of the layer.\nΨ – Four eigenmodes of the layer.\nS – Poynting vectors of the four eigenmodes of the layer.\nΔ – Δ matrix.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"type"},{"location":"library-public/#GeneralizedTransferMatrixMethod.StructureProperties","page":"Public","title":"GeneralizedTransferMatrixMethod.StructureProperties","text":"struct StructureProperties\n            Γ::AbstractMatrix\n            superstrate::LayerProperties\n            layers::AbstractVector{LayerProperties}\n            substrate::LayerProperties\n    end\n\nType that holds all properties of an entire layered structure.\n\nThe properties of this type only make sense in combination with the wavelength λ and the normalized in-plane wavevector component ζ.\n\nFields\n\nΓ           – Full transfer matrix Γ* (see reference).\nsuperstrate – Properties of the superstrate layer.\nlayers      – List of properties of the intermediate layers.\nsubstrate   – Properties of the substrate layer.\n\nReference\n\nThe definition is taken from Passler and Paarmann 2017 and Passler and Paarmann 2019 (erratum).\n\n\n\n\n\n","category":"type"},{"location":"library-public/#Exported-permittivities","page":"Public","title":"Exported permittivities","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"ϵ_vacuum\nϵ_Ag\nϵ_Au\nϵ_SiC\nϵ_MoO₃","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_vacuum","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_vacuum","text":"ϵ_vacuum(λ)\n\nCalculate the permittivity of vacuum. Return thes identity matrix.\n\nInput\n\nλ – Wavelengeth [m].\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_Ag","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_Ag","text":"ϵ_Ag(λ)\n\nCalculate permittivity tensor of Ag.\n\nInput\n\nλ – Wavelength [m].\n\n\n\n\n\nϵ_Ag(λ::Unitful.Length)\n\nCalculate permittivity tensor of Ag using Unitful quantities.\n\nInput\n\nλ – Wavelength.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_Au","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_Au","text":"ϵ_Au(λ)\n\nCalculate permittivity tensor of Au.\n\nInput\n\nλ – Wavelength [m].\n\n\n\n\n\nϵ_Au(λ::Unitful.Length)\n\nCalculate permittivity tensor of Au using Unitful quantities.\n\nInput\n\nλ – Wavelength.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_SiC","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_SiC","text":"ϵ_SiC(λ)\n\nCalculate permittivity tensor of SiC.\n\nInput\n\nλ – Wavelength [m].\n\n\n\n\n\nϵ_SiC(λ::Unitful.Length)\n\nCalculate permittivity tensor of SiC using Unitful quantities.\n\nInput\n\nλ – Wavelength.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_MoO₃","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_MoO₃","text":"ϵ_MoO₃(λ)\n\nCalculate permittivity tensor of MoO₃.\n\nInput\n\nλ – Wavelength [m].\n\n\n\n\n\nϵ_MoO₃(λ::Unitful.Length)\n\nCalculate permittivity tensor of MoO₃ using Unitful quantities.\n\nInput\n\nλ – Wavelength.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Exported-material-layers","page":"Public","title":"Exported material layers","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"Ag\nAu\nSiC\nMoO₃","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Ag","page":"Public","title":"GeneralizedTransferMatrixMethod.Ag","text":"Ag(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of Ag using keyword arguments.\n\nInput\n\nSuitable quantities with units from Unitful also work.\n\nd – Thickness of the layer [m] (default: 0).\nθ – θ Euler angle [rad] (default: 0).\nϕ – ϕ Euler angle [rad] (default: 0).\nψ – ψ Euler angle [rad] (default: 0).\n\n\n\n\n\nAg(d, θ, ϕ, ψ)\n\nDefine a Layer of Ag.\n\nInput\n\nd – Thickness of the layer [m].\nθ – θ Euler angle [rad].\nϕ – ϕ Euler angle [rad].\nψ – ψ Euler angle [rad].\n\n\n\n\n\nAg(d::Unitful.Length, θ, ϕ, ψ)\n\nDefine a Layer of Ag using Unitful quantities.\n\nInput\n\nd – Thickness of the layer.\nθ – θ Euler angle.\nϕ – ϕ Euler angle.\nψ – ψ Euler angle.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Au","page":"Public","title":"GeneralizedTransferMatrixMethod.Au","text":"Au(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of Au using keyword arguments.\n\nInput\n\nSuitable quantities with units from Unitful also work.\n\nd – Thickness of the layer [m] (default: 0).\nθ – θ Euler angle [rad] (default: 0).\nϕ – ϕ Euler angle [rad] (default: 0).\nψ – ψ Euler angle [rad] (default: 0).\n\n\n\n\n\nAu(d, θ, ϕ, ψ)\n\nDefine a Layer of Au.\n\nInput\n\nd – Thickness of the layer [m].\nθ – θ Euler angle [rad].\nϕ – ϕ Euler angle [rad].\nψ – ψ Euler angle [rad].\n\n\n\n\n\nAu(d::Unitful.Length, θ, ϕ, ψ)\n\nDefine a Layer of Au using Unitful quantities.\n\nInput\n\nd – Thickness of the layer.\nθ – θ Euler angle.\nϕ – ϕ Euler angle.\nψ – ψ Euler angle.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.SiC","page":"Public","title":"GeneralizedTransferMatrixMethod.SiC","text":"SiC(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of SiC using keyword arguments.\n\nInput\n\nSuitable quantities with units from Unitful also work.\n\nd – Thickness of the layer [m] (default: 0).\nθ – θ Euler angle [rad] (default: 0).\nϕ – ϕ Euler angle [rad] (default: 0).\nψ – ψ Euler angle [rad] (default: 0).\n\n\n\n\n\nSiC(d, θ, ϕ, ψ)\n\nDefine a Layer of SiC.\n\nInput\n\nd – Thickness of the layer [m].\nθ – θ Euler angle [rad].\nϕ – ϕ Euler angle [rad].\nψ – ψ Euler angle [rad].\n\n\n\n\n\nSiC(d::Unitful.Length, θ, ϕ, ψ)\n\nDefine a Layer of SiC using Unitful quantities.\n\nInput\n\nd – Thickness of the layer.\nθ – θ Euler angle.\nϕ – ϕ Euler angle.\nψ – ψ Euler angle.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.MoO₃","page":"Public","title":"GeneralizedTransferMatrixMethod.MoO₃","text":"MoO₃(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of MoO₃ using keyword arguments.\n\nInput\n\nSuitable quantities with units from Unitful also work.\n\nd – Thickness of the layer [m] (default: 0).\nθ – θ Euler angle [rad] (default: 0).\nϕ – ϕ Euler angle [rad] (default: 0).\nψ – ψ Euler angle [rad] (default: 0).\n\n\n\n\n\nMoO₃(d, θ, ϕ, ψ)\n\nDefine a Layer of MoO₃.\n\nInput\n\nd – Thickness of the layer [m].\nθ – θ Euler angle [rad].\nϕ – ϕ Euler angle [rad].\nψ – ψ Euler angle [rad].\n\n\n\n\n\nMoO₃(d::Unitful.Length, θ, ϕ, ψ)\n\nDefine a Layer of MoO₃ using Unitful quantities.\n\nInput\n\nd – Thickness of the layer.\nθ – θ Euler angle.\nϕ – ϕ Euler angle.\nψ – ψ Euler angle.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: header)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The 4 times 4 transfer matrix method was initially introduced by Teitler and Henvis [1] and later popularized by Berreman [2]. This method provides a concise approach for computing the reflection and transmission properties of anisotropic optical materials. By employing a matrix-based formulation, it simplifies the calculation of these parameters for any stack of planar layers and lends itself to numerical implementation. The present package implements the generalized transfer matrix formalism as presented in [3-5]. The authors provide a Python implementation (pyGTM), as well as a Matlab implementation (First version (2019), Updated version (2020)).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Notation\nThe notation utilized in both the documentation and the source code closely adheres to the one introduced in [3]. Any instances of deviation from this in the code are explicitly addressed within the corresponding docstring.","category":"page"},{"location":"#Upcoming-features","page":"Introduction","title":"Upcoming features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Function to directly calculate the fields within the layers.\nInterface to easily read in tabulated permittivity data.","category":"page"},{"location":"#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Teitler, S. & Henvis, B. W. Refraction in Stratified, Anisotropic Media*. J. Opt. Soc. Am., JOSA 60, 830–834 (1970). \nBerreman, D. W. Optics in Stratified and Anisotropic Media: 4×4-Matrix Formulation. J. Opt. Soc. Am., JOSA 62, 502–510 (1972). \nPassler, N. C. & Paarmann, A. Generalized 4 × 4 matrix formalism for light propagation in anisotropic stratified media: study of surface phonon polaritons in polar dielectric heterostructures. J. Opt. Soc. Am. B 34, 2128 (2017). \nPassler, N. C. & Paarmann, A. Generalized 4 × 4 matrix formalism for light propagation in anisotropic stratified media: study of surface phonon polaritons in polar dielectric heterostructures: erratum. J. Opt. Soc. Am. B 36, 3246 (2019). \nPassler, N. C., Jeannin, M. & Paarmann, A. Layer-resolved absorption of light in arbitrarily anisotropic heterostructures. Phys. Rev. B 101, 165425 (2020). ","category":"page"}]
}
