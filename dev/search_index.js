var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This section offers a concise and user-friendly guide to effectively utilize GeneralizedTransferMatrixMethod.jl. ","category":"page"},{"location":"gettingstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The latest version of GeneralizedTransferMatrixMethod.jl can be installed via the built-in package manager. In the Julia REPL, press ] to access the package manager and run","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"pkg> add GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Updates can be installed similarly using the up command","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"pkg> up GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"warn: Julia version\nIt is recommended to use a recent Julia version. This package was tested on Julia v1.11 and onwards, but does not provide any backwards compatibility.","category":"page"},{"location":"gettingstarted/#Tutorial","page":"Getting Started","title":"Tutorial","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This tutorial goes through some simple examples to explain the key features of  GeneralizedTransferMatrixMethod.jl.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Unitful.jl integration\nIn this tutorial we all input parameters are given in SI units. This package supports the use of arbitrary units using the Unitful.jl packages. For more information see Unitful.jl integration.","category":"page"},{"location":"gettingstarted/#Glass–Air-interface","page":"Getting Started","title":"Glass–Air interface","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using GeneralizedTransferMatrixMethod\nusing Plots\n\ndefault(\n    lw=3, \n    label=:none,\n    framestyle=:box,\n    grid=false,\n    size = (1200,600),\n    bottom_margin=5Plots.mm,\n    left_margin=5Plots.mm,\n    right_margin=5Plots.mm\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We should now be able to load the package:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using GeneralizedTransferMatrixMethod","category":"page"},{"location":"gettingstarted/#Setting-up-the-structure","page":"Getting Started","title":"Setting up the structure","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We first have to define the materials we want to use. While there are a few materials included in the package (Au, Ag, SiC, MoO₃, ...), we start by defining the permittivities from scratch. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For this we use the @permittivity macro. This macro expects the name of the material we want to define and a function that takes the wavelength λ in meters and returns the full permittivity tensor.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"A simple example would be to define Glass with a constant permittivity of 1.5:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using LinearAlgebra\n\n@permittivity \"Glass\" λ -> Diagonal(ones(3)) * 1.5","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We first load the LinearAlgebra standard library to have access to the function Diagonal, so we don't have to write out the 3 times 3 diagonal matrix ourselves. In this example we passed a anonymous function (-> syntax) to the permittivity macro, but we could have also defined the function beforehand:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"f(λ) = Diagonal(ones(3)) * 1.5\n\n@permittivity \"Glass\" f","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The macro has defined a function called \"Glass,\" which returns a structure of type Layer. Additionally, it has created a function ϵ_Glass, which is identical to the input function we provided:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Glass()","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To calculate the reflection of a Glass–Air interface, we must define an Air layer. To accomplish this, we can simply invoke the Layer function without providing any arguments. This will create a Layer with a constant permittivity of 1:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Air = Layer()","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"With these two layers, we can now build up a LayeredStructure:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Interface = LayeredStructure(\n    superstrate = Glass(),\n    substrate = Air\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"tip: Intermediate layers\nMore intermediate layers can be specified using the layers keyword, e.g.:LayeredStructure(\n    superstrate = Air,\n    layers = [Glass()],\n    substrate = Air\n)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"danger: Isotropic superstrate and substrate\nFor this code to work the superstrate and substrate need to be isotropic. Most of the time, adding an extra air layer solves related problems. ","category":"page"},{"location":"gettingstarted/#Calculating-optical-properties","page":"Getting Started","title":"Calculating optical properties","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For a given wavelength λ and angle of incidence α:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"λ = 1.55e-6 # [m]\nα = deg2rad(10) # [rad]\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"we can calculate the reflection:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = calculate_reflection(λ, α, Interface)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"and transmission:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Tₚₚ, Tₛₛ, Tₚₛ, Tₛₚ = calculate_transmission(λ, α, Interface)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"which are returned as tuples of the form (Xₚₚ, Xₛₛ, Xₚₛ, Xₛₚ), where the right index denotes the polarzation of the incident light and the left index the polarization of the outgoing light. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"tip: Circular basis\nThe output can be changed to a circular basis using the basis keyword argument: calculate_transmission(λ, α, Interface; basis=:circular)Here, the returned tuple has the form (T_RR, T_LL, T_RL, T_LR).","category":"page"},{"location":"gettingstarted/#Angular-dependence","page":"Getting Started","title":"Angular dependence","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We can now calculate the angular dependence of the reflection of our interface by replacing the incident angle α by a list of angles:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"λ = 1.55e-6 # [m]\nα = deg2rad.(0:0.1:89) # [rad]\n\nR = calculate_reflection.(λ, α, Interface)\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We now have a list of tupels R, where each element has the shape (Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ). If we want to split them into separate lists, we can use the Unzip.jl package:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Unzip\n\nRₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = unzip(R)\nnothing #hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Finally to visualize our results, we use Plots.jl","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Plots\n\nplot(\n    rad2deg.(α), [Rₚₚ Rₛₛ], \n    label = [\"Rₚₚ\" \"Rₛₛ\"],\n    xlabel = \"Angle of incidence (°)\", ylabel = \"Reflection\"\n)\nsavefig(\"interface-plot.svg\"); \nnothing # hide","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"nonreciprocity/#Nonreciprocity","page":"Nonreciprocity","title":"Nonreciprocity","text":"","category":"section"},{"location":"nonreciprocity/","page":"Nonreciprocity","title":"Nonreciprocity","text":"TODO","category":"page"},{"location":"photonic-crystal/#Distributed-Bragg-reflector","page":"Distributed Bragg reflector","title":"Distributed Bragg reflector","text":"","category":"section"},{"location":"photonic-crystal/","page":"Distributed Bragg reflector","title":"Distributed Bragg reflector","text":"Reference: Wikipedia: Distributed Bragg reflector","category":"page"},{"location":"photonic-crystal/","page":"Distributed Bragg reflector","title":"Distributed Bragg reflector","text":"📚 Code as Pluto.jl notebook","category":"page"},{"location":"photonic-crystal/","page":"Distributed Bragg reflector","title":"Distributed Bragg reflector","text":"using GeneralizedTransferMatrixMethod\nusing Plots\nusing Unzip\n\n# refractiveindex.info material database\nusing RefractiveIndex\n\n# Import useful predefined units\n# (otherwise one could write, e.g. u\"cm\")\nusing Unitful: cm, μm, nm, °\n\ndefault(\n    lw=3, \n    label=:none,\n    framestyle=:box,\n    grid=false,\n    size = (1200,600),\n    bottom_margin=5Plots.mm,\n    left_margin=5Plots.mm,\n    right_margin=5Plots.mm\n)\n\n# Refractive indices\nRI_SiO₂ = RefractiveMaterial(\"https://refractiveindex.info/?shelf=main&book=SiO2&page=Malitson\")\nRI_TiO₂ = RefractiveMaterial(\"https://refractiveindex.info/?shelf=main&book=TiO2&page=Devore-o\")\n\n# Define layers\n@permittivity \"SiO₂\" RI_SiO₂\n@permittivity \"TiO₂\" RI_TiO₂\n\n# Target wavelength\nλ₀ = 1μm\n\n# Layer thicknesses\nd_SiO₂ = λ₀/4RI_SiO₂(λ₀)\nd_TiO₂ = λ₀/4RI_TiO₂(λ₀)\n\n# Calculate peak reflectivity at target wavelength\nfunction R_peak(λ₀, N)\n    n₁ = RI_SiO₂(λ₀)\n    n₂ = RI_TiO₂(λ₀)\n    \n    ((n₂^(2N) - n₁^(2N)) / (n₂^(2N) + n₁^(2N)))^2\nend\n\n# Function to build structure\nS(d₁, d₂, N) = LayeredStructure(\n    superstrate=Layer(),\n    layers = repeat([SiO₂(d = d₁), TiO₂(d = d₂)], N),\n    substrate=Layer()\n)\n\n# We are only interested in Rₚₚ, so we write a function to extract it\n# (ₚ can be typed by typing \\_p<tab>)\nfunction Bragg_reflection(λ, d₁, d₂, N)\n    # The function returns the tuple (Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ) but we only store Rₚₚ\n    Rₚₚ,_,_,_ = calculate_reflection(λ, 0°, S(d₁, d₂, N))\n    Rₚₚ\nend\n\n# Wavelength range\nλ = (600:1400)nm\n\n# Number of layers\n# Make sure to define N as a row vector, so we can use the dot-syntax to iterate \n# over the wavelengths λ and N at the same time.\nN = [1 2 3 10]\n\n# Calculate reflectivity\nR_Bragg = Bragg_reflection.(λ, d_SiO₂, d_TiO₂, N)\n\nplot(λ, R_Bragg, label = string.(N) .* \" Layer\" .* [n ≠ 1 ? \"s\" : \"\" for n in N],\n    xlabel = \"Wavelength\",\n    ylabel = \"Reflectivity\",\n    title = \"Distributed Bragg reflector\"\n)\nscatter!(λ₀ * ones(length(N)), R_peak.(λ₀, N'), label=\"Peak reflectivity\")\n\nsavefig(\"quarter-wave-stack-plot.svg\") # hide\nnothing # hide","category":"page"},{"location":"photonic-crystal/","page":"Distributed Bragg reflector","title":"Distributed Bragg reflector","text":"(Image: )","category":"page"},{"location":"refractiveindex/#RefractiveIndex.jl-integration","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"","category":"section"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"The @permittivity macro accepts the types defined by RefractiveIndex.jl.","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"After loading both packages","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"using GeneralizedTransferMatrixMethod\nusing RefractiveIndex","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"we can define some materials from refractiveindex.info","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"RI_Si = RefractiveMaterial(\"https://refractiveindex.info/?shelf=main&book=Si&page=Aspnes\")","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"RI_SiO₂_o = RefractiveMaterial(\"https://refractiveindex.info/?shelf=main&book=SiO2&page=Ghosh-o\")","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"RI_SiO₂_e = RefractiveMaterial(\"https://refractiveindex.info/?shelf=main&book=SiO2&page=Ghosh-e\")","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"Now, we can use those together with the @permittivity macro. For an isotropic material we can just pass one RefractiveMaterial.","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"@permittivity \"Si\" RI_Si\n\nϵ_Si(0.5e-6)","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"If we pass an array of RefractiveMaterial of length two, the second entry is used as the third diagonal component of the permittivity tensor.","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"@permittivity \"SiO₂\" [RI_SiO₂_o, RI_SiO₂_e]\n\nϵ_SiO₂(0.5e-6)","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"In all other cases, we can always just pass an array of length three.","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"@permittivity \"SiO₂\" [RI_SiO₂_o, RI_SiO₂_e, RI_SiO₂_o]\n\nϵ_SiO₂(0.5e-6)","category":"page"},{"location":"refractiveindex/","page":"RefractiveIndex.jl integration","title":"RefractiveIndex.jl integration","text":"danger: TabulatedK\nMaterials with a table for just the extinction coefficient (RefractiveMaterial{TabulatedK}) are notd supported.","category":"page"},{"location":"unitful/#Unitful.jl-integration","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"","category":"section"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using Plots\n\ndefault(\n    lw=3, \n    label=:none,\n    framestyle=:box,\n    grid=false,\n    size = (800,300),\n    bottom_margin=5Plots.mm,\n    left_margin=5Plots.mm,\n    right_margin=5Plots.mm\n)","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"GeneralizedTransferMatrixMethod.jl has an extension for Unitful.jl, which is loaded if both packages are used together. This way all input parameters can be specified using the units supported by Unitful.jl.","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using LinearAlgebra\n\nusing GeneralizedTransferMatrixMethod\n# Import most common units \nusing Unitful: °, nm, μm, mm, m","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"tip: Wavenumber, Frequency, Energy\nThe use wavenumber units (e.g. u\"cm^-1\"), frequency units (e.g. u\"Hz\") and energy units (e.g. u\"eV\") is also supported out of the box.","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"We simulate a slab of a uniaxial crystal in air as an illustrative example","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Air = Layer()\n\nnₒ(λ) = 3\nnₑ(λ) = 1.5\n\n@permittivity \"Mat\" λ -> Diagonal([nₒ(λ), nₑ(λ), nₒ(λ)].^2)","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"We can define all input parameters using Unitful.jl quantities","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"α = 30°\nϕ = 45°\nd = 183nm\n\nλ = (500:0.1:600)nm\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"and pass them to setup the LayeredStructure","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Stack = LayeredStructure(\n    superstrate = Air,\n    layers = [Mat(d = d, ϕ = ϕ)],\n    substrate = Air\n)","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"and use them to calculate its properties","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"\nusing Unzip\n\nR = calculate_reflection.(λ, α, Stack)\nRₚₚ, Rₛₛ, Rₚₛ, Rₛₚ = unzip(R)\n\nT = calculate_transmission.(λ, α, Stack)\nTₚₚ, Tₛₛ, Tₚₛ, Tₛₚ = unzip(T)\nnothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"Units get automatically added to the axis labels in Plots.jl","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"using Plots\n\np1 = plot(\n    λ, [Rₚₚ Rₛₛ Rₚₛ Rₛₚ], \n    label = [\"Rₚₚ\" \"Rₛₛ\" \"Rₚₛ\" \"Rₛₚ\"],\n    xlabel = \"Wavelength\",\n    ylabel = \"Reflection\",\n    ls = [:solid :dash],\n)\np2 = plot(\n    λ, [Tₚₚ Tₛₛ Tₚₛ Tₛₚ], \n    label = [\"Tₚₚ\" \"Tₛₛ\" \"Tₚₛ\" \"Tₛₚ\"],\n    xlabel = \"Wavelength\",\n    ylabel = \"Transmission\",\n    ls = [:solid :dash],\n)\nplot(p1,p2)\nsavefig(\"unitful-plot.svg\"); nothing # hide","category":"page"},{"location":"unitful/","page":"Unitful.jl integration","title":"Unitful.jl integration","text":"(Image: )","category":"page"},{"location":"library-internal/#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"The references are displayed at the bottom instead of directly in the docstring because auf Documenter.jl.","category":"page"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.References","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.References","page":"Internal","title":"GeneralizedTransferMatrixMethod.References","text":"Dictionary of references used in this Package.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#Constants","page":"Internal","title":"Constants","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.c₀\nGeneralizedTransferMatrixMethod.ϵ₀\nGeneralizedTransferMatrixMethod.μ₀\nGeneralizedTransferMatrixMethod.SIdentity","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.c₀","page":"Internal","title":"GeneralizedTransferMatrixMethod.c₀","text":"Speed of light in vacuum fracms.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ₀","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ₀","text":"Vacuum permittivity fracFm.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.μ₀","page":"Internal","title":"GeneralizedTransferMatrixMethod.μ₀","text":"Vacuum permeability fracNA^2.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.SIdentity","page":"Internal","title":"GeneralizedTransferMatrixMethod.SIdentity","text":"3D identity matrix using StaticArrays.jl.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#TMM-matrices","page":"Internal","title":"TMM matrices","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.J\nGeneralizedTransferMatrixMethod.ν_mats\nGeneralizedTransferMatrixMethod.P_mat\nGeneralizedTransferMatrixMethod.M_mat\nGeneralizedTransferMatrixMethod.K_mat\nGeneralizedTransferMatrixMethod.calculate_layer_M\nGeneralizedTransferMatrixMethod.calculate_structure_M","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.J","page":"Internal","title":"GeneralizedTransferMatrixMethod.J","text":"All-ones matrix as defined in Eq. 2.50 in [1].\n\nReferences\n\n[1]: Mackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ν_mats","page":"Internal","title":"GeneralizedTransferMatrixMethod.ν_mats","text":"ν_mats(qₓ, ϵ, μ, ξ, ζ)\n\nCalculate the coefficients of the auxiliary phasors e_z and h_z, as described in Eq. 2.46 in [1]. Returns two matrices of the form:\n\nbeginpmatrix\nnu^ee_zx    \n nu^ee_zy   \n  nu^eh_zx  \n   nu^eh_zy\nendpmatrix\n\nand\n\nbeginpmatrix\nnu^he_zx    \n nu^he_zy   \n  nu^hh_zx  \n   nu^hh_zy\nendpmatrix\n\nArguments\n\nqₓ: Normalized in-plane component of the wavevector.\nϵ: Permittivity tensor.\nμ: Permeability tensor.\nξ, ζ: Optical rotation tensors.\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.ν_mats(0.3, 3ones(3,3), ones(3,3), zeros(3,3), zeros(3,3))\n([-1.0 0.0 0.0 0.0; 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 -3.3356409519815207e-10], [0.0 0.0 0.0 0.0; 0.0 1.0006922855944562e-9 0.0 0.0; 0.0 0.0 -1.0 0.0; 0.0 0.0 0.0 -1.0])\n\nReferences\n\n[1]: Mackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.P_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.P_mat","text":"P_mat(ω, qₓ, ϵ, μ, ξ, ζ)\n\nCalculate the P matrix according to Eq. 2.49 in [1].\n\nArguments\n\nω: Angular frequency [1/s] frac1s.\nqₓ: Normalized in-plane component of the wavevector.\nϵ: Permittivity tensor.\nμ: Permeability tensor.\nξ, ζ: Optical rotation tensors.\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.P_mat(1.8e14, 0.3, 3ones(3,3), ones(3,3), zeros(3,3), zeros(3,3))\n4×4 StaticArraysCore.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n -1.80125e5   0.0           0.0         0.0\n  0.0        -1.80125e5     0.0         0.0\n  0.0         0.000180249  -1.80125e5   0.0\n  0.0         0.0           0.0        -1.80125e5\n\nReferences\n\n[1]: Mackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.M_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.M_mat","text":"M_mat(d, ω, qₓ, ϵ, μ, ξ, ζ)\n\nCalculate the M matrix according to Eq. 2.52 in [1].\n\nArguments\n\nd: Thickness m.\nω: Angular frequency frac1s.\nqₓ: Normalized in-plane component of the wavevector.\nϵ: Permittivity tensor.\nμ: Permeability tensor.\nξ, ζ: Optical rotation tensors.\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.M_mat(1e-6, 1.8e14, 0.3, 3ones(3,3), ones(3,3), zeros(3,3), zeros(3,3))\n4×4 StaticArraysCore.SMatrix{4, 4, ComplexF64, 16} with indices SOneTo(4)×SOneTo(4):\n 0.983821+0.179152im          0.0-0.0im          …       0.0-0.0im\n      0.0-0.0im          0.983821+0.179152im             0.0-0.0im\n      0.0-0.0im       3.22921e-11-1.77333e-10im          0.0-0.0im\n      0.0-0.0im               0.0-0.0im             0.983821+0.179152im\n\n\nReferences\n\n[1]: Mackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.K_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.K_mat","text":"K_mat(n, cos_θ)\n\nCalculate the K matrix according to Eq. 3.16 in [1].\n\nArguments\n\nn: Refractive index.\ncos_θ: Cosine of angle between the k-vector and the surface normal.\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.K_mat(1.8, cos(π/4))\n4×4 StaticArraysCore.SMatrix{4, 4, Float64, 16} with indices SOneTo(4)×SOneTo(4):\n 0.0          0.707107     0.0         -0.707107\n 1.0          0.0          1.0          0.0\n 0.00337852   0.0         -0.00337852   0.0\n 0.0         -0.00477795   0.0         -0.00477795\n\nReferences\n\n[1]: Mackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.calculate_layer_M","page":"Internal","title":"GeneralizedTransferMatrixMethod.calculate_layer_M","text":"calculate_layer_M(λ, qₓ, layer)\n\nCalculate the M matrix for a single layer.\n\nArguments\n\nλ: Wavelength m.\nqₓ: Normalized in-plane component of the wavevector.\nlayer: Material Layer.\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.calculate_layer_M(12.3e-6, 0.5, Layer(d = 2e-6))\n4×4 StaticArraysCore.SMatrix{4, 4, ComplexF64, 16} with indices SOneTo(4)×SOneTo(4):\n 0.63346+0.0im             0.0+0.0im         …      0.0-252.451im\n     0.0+0.0im         0.63346+0.0im                0.0+0.0im\n     0.0+0.0im             0.0+0.00177875im         0.0+0.0im\n     0.0-0.00237167im      0.0+0.0im            0.63346+0.0im\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.calculate_structure_M","page":"Internal","title":"GeneralizedTransferMatrixMethod.calculate_structure_M","text":"calculate_structure_M(λ, α, strct)\n\nCalculate the M matrix for a layered structure.\n\nArguments\n\nλ: Wavelength m.\nα: Angle of incidence.\nstrct: Structure of type LayeredStructure.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate=Au());\n\njulia> GeneralizedTransferMatrixMethod.calculate_structure_M(12.3e-6, deg2rad(20), S)\n4×4 StaticArraysCore.SMatrix{4, 4, ComplexF64, 16} with indices SOneTo(4)×SOneTo(4):\n 0.501778-0.00554054im       0.0+0.0im         …       0.0+0.0im\n     -0.0+0.0im         0.471735-0.00589861im     -0.46795-0.0058937im\n 0.498222+0.00554054im      -0.0+0.0im                -0.0+0.0im\n     -0.0+0.0im         -0.46795-0.0058937im      0.471735-0.00589861im\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#Helper-functions","page":"Internal","title":"Helper functions","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.convert_to_wavelength\nGeneralizedTransferMatrixMethod.nan_to_zero\nGeneralizedTransferMatrixMethod.build_dir\n\nGeneralizedTransferMatrixMethod.euler_mat\nGeneralizedTransferMatrixMethod.basis_change\nGeneralizedTransferMatrixMethod.T_mat\nGeneralizedTransferMatrixMethod.circ_coeffs\nGeneralizedTransferMatrixMethod.basis_selector\n\nGeneralizedTransferMatrixMethod.calculate_cos_αt","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.convert_to_wavelength","page":"Internal","title":"GeneralizedTransferMatrixMethod.convert_to_wavelength","text":"convert_to_wavelength(x)\n\nFunction to dispatch on for extensions that use other wavelength/frequency/energy units. The default implementation is just the identity. Any function that has a wavelength argument uses this function.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.nan_to_zero","page":"Internal","title":"GeneralizedTransferMatrixMethod.nan_to_zero","text":"nan_to_zero(x)\n\nReturn 0 if the input is NaN, othewise return x.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.build_dir","page":"Internal","title":"GeneralizedTransferMatrixMethod.build_dir","text":"build_dir(f)\n\nCreats path to files in build directory.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.euler_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.euler_mat","text":"euler_mat(θ, ϕ, ψ)\n\nCalculate the Euler matrix from the Euler angles θ, ϕ, and ψ.\n\n\n\n\n\n    euler_mat(layer::Layer)\n\nCalculate the Euler matrix for a Layer.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.basis_change","page":"Internal","title":"GeneralizedTransferMatrixMethod.basis_change","text":"basis_change(M,T)\n\nChange basis of matrix M using the basis transformation matrix T.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.T_mat","page":"Internal","title":"GeneralizedTransferMatrixMethod.T_mat","text":"Basis tarnsformation matrix to change from a linear polarization basis to a circular polarization basis.\n\n\n\n\n\n","category":"constant"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.circ_coeffs","page":"Internal","title":"GeneralizedTransferMatrixMethod.circ_coeffs","text":"circ_coeffs(cₚₚ, cₛₛ, cₚₛ, cₛₚ)\n\nTransform transmission/reflection coefficients from a linear to a circula basis. The output has the form (c_RR, c_LL, c_RL, c_LR).\n\nExamples\n\njulia> GeneralizedTransferMatrixMethod.circ_coeffs(0.23, 0.24, 0.14, 0.14)\n(0.235 + 0.0im, 0.235 + 0.0im, -0.0050000000000000044 + 0.14im, -0.0050000000000000044 - 0.14im)\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.basis_selector","page":"Internal","title":"GeneralizedTransferMatrixMethod.basis_selector","text":"basis_selector(coeffs, basis)\n\nReturn linear input coeffs in given basis, either :linear or :circular.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.calculate_cos_αt","page":"Internal","title":"GeneralizedTransferMatrixMethod.calculate_cos_αt","text":"calculate_cos_αt(λ, α, strct)\n\nCalculate the cosine outgoing angle for a layered structure strct and angle of incidence α. Returns the tuple (cos_αt, n_inc, n_out, qₓ), where cos_αt is the cosine of the outgoing angle, n_inc is the refractive index of the incident medium, n_out is the refractive index of the outgoing medium, and qₓ is the normalized in-plane wavevector component.\n\nWe make sure to choose the correct branch when calculating the cosine for more see Section 5 in [1].\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate = SiC());\n\njulia> GeneralizedTransferMatrixMethod.calculate_cos_αt(12e-6, deg2rad(14), S)\n(1.0010924505072016 + 6.976717567528191e-5im, 1.0 + 0.0im, 0.1648892944698832 + 5.166277293025589im, 0.24192189559966773 + 0.0im)\n\nReferences\n\n[1]: Byrnes, S. J. Multilayer Optical Calculations. arXiv:1603.02720 [Physics], December 30, 2020. http://arxiv.org/abs/1603.02720.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#Permittivities","page":"Internal","title":"Permittivities","text":"","category":"section"},{"location":"library-internal/","page":"Internal","title":"Internal","text":"GeneralizedTransferMatrixMethod.lorentz_osc\nGeneralizedTransferMatrixMethod.ϵ_drude\nGeneralizedTransferMatrixMethod.parse_permittivity\n\nGeneralizedTransferMatrixMethod.ϵ_x_MoO₃\nGeneralizedTransferMatrixMethod.ϵ_y_MoO₃\nGeneralizedTransferMatrixMethod.ϵ_z_MoO₃","category":"page"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.lorentz_osc","page":"Internal","title":"GeneralizedTransferMatrixMethod.lorentz_osc","text":"lorentz_osc(f, fₗₒ, fₜₒ, γ)\n\nCalculate a single lorentz oscillator (without ϵ∞). The definition is taken from [1].\n\nArguments\n\nf: Frequency.\nfₗₒ: Frequency of the longitudinal optical phonon.\nfₜₒ: Frequency of the transverse optical phonon.\nγ: Damping factor of the Lorentzian line shape.\n\nReferences\n\n[1]: Álvarez-Pérez, G. et al. Infrared Permittivity of the Biaxial van Der Waals Semiconductor α-MoO₃ from Near- and Far-Field Correlative Studies. Adv. Mater. 32, 1908176  (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_drude","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_drude","text":"ϵ_drude(f, fₚ, γ)\n\nCalculate the permitivity from Drude model.\n\nArguments\n\nf: Frequency.\nfₚ: Plasma frequency.\nγ: Mean collision rate.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.parse_permittivity","page":"Internal","title":"GeneralizedTransferMatrixMethod.parse_permittivity","text":"parse_permittivity(func)\n\nFunction used inside the @permittivity macro to dispatch on for extensions. The default implementation just returns the original function.\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_x_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_x_MoO₃","text":"ϵ_x_MoO₃(λ)\n\nCalculate the x principal component of the permitivity tensor of MoO₃. The parameters are taken from [1].\n\nArguments\n\nλ: Wavelength [m].\n\nReferences\n\n[1]: Álvarez-Pérez, G. et al. Infrared Permittivity of the Biaxial van Der Waals Semiconductor α-MoO₃ from Near- and Far-Field Correlative Studies. Adv. Mater. 32, 1908176  (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_y_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_y_MoO₃","text":"ϵ_y_MoO₃(λ)\n\nCalculate the y principal component of the permitivity tensor of MoO₃. The parameters are taken from [1].\n\nArguments\n\nλ: Wavelength [m].\n\nReferences\n\n[1]: Álvarez-Pérez, G. et al. Infrared Permittivity of the Biaxial van Der Waals Semiconductor α-MoO₃ from Near- and Far-Field Correlative Studies. Adv. Mater. 32, 1908176  (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-internal/#GeneralizedTransferMatrixMethod.ϵ_z_MoO₃","page":"Internal","title":"GeneralizedTransferMatrixMethod.ϵ_z_MoO₃","text":"ϵ_z_MoO₃(λ)\n\nCalculate the z principal component of the permitivity tensor of MoO₃. The parameters are taken from [1].\n\nArguments\n\nλ: Wavelength [m].\n\nReferences\n\n[1]: Álvarez-Pérez, G. et al. Infrared Permittivity of the Biaxial van Der Waals Semiconductor α-MoO₃ from Near- and Far-Field Correlative Studies. Adv. Mater. 32, 1908176  (2020).\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Public","page":"Public","title":"Public","text":"","category":"section"},{"location":"library-public/#Exported-macros","page":"Public","title":"Exported macros","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"@permittivity","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.@permittivity","page":"Public","title":"GeneralizedTransferMatrixMethod.@permittivity","text":"permittivity(name, func)\n\nThis macro takes the name of a material and the permittivity func, depending on λ and returning the permittivity matrix. It generates the permittivity funcion ϵ_Name and the Layer function Name.\n\nNote\n\nThe first letter of the name is always capitalised.\n\n\n\n\n\n","category":"macro"},{"location":"library-public/#Exported-functions","page":"Public","title":"Exported functions","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"reflection_coeffs\ntransmission_coeffs\ncalculate_reflection\ncalculate_transmission","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.reflection_coeffs","page":"Public","title":"GeneralizedTransferMatrixMethod.reflection_coeffs","text":"reflection_coeffs(λ, α, strct; basis=:linear)\n\nCalculate the reflection coefficients.\n\nArguments\n\nλ: Wavelength m.\nα: Angle of incidence.\nstrct: Structure of type LayeredStructure.\nbasis=:linear: Returns (rₚₚ, rₛₛ, rₚₛ, rₛₚ) in :linear basis and (r_RR, r_LL, r_RL, r_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate=Au());\n\njulia> reflection_coeffs(12.3e-6, deg2rad(20), S)\n(0.9916655707450739 + 0.02489351332010354im, -0.9926693143906693 - 0.02200268526284087im, 0.0 + 0.0im, -0.0 + 0.0im)\n\n\n\n\n\nreflection_coeffs(M; basis=:linear)\n\nCalculate reflection coefficients from M matrix. Returns (rₚₚ, rₛₛ, rₚₛ, rₛₚ) in :linear basis and (r_RR, r_LL, r_RL, r_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate=Au());\n\njulia> M = GeneralizedTransferMatrixMethod.calculate_structure_M(12.3e-6, deg2rad(20), S);\n\njulia> reflection_coeffs(M)\n(0.9916655707450739 + 0.02489351332010354im, -0.9926693143906693 - 0.02200268526284087im, 0.0 + 0.0im, -0.0 + 0.0im)\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.transmission_coeffs","page":"Public","title":"GeneralizedTransferMatrixMethod.transmission_coeffs","text":"transmission_coeffs(λ, α, strct; basis=:linear)\n\nCalculate the transmission coefficients.\n\nArguments\n\nλ: Wavelength m.\nα: Angle of incidence.\nstrct: Structure of type LayeredStructure.\nbasis=:linear: Returns (tₚₚ, tₛₛ, tₚₛ, tₛₚ) in :linear basis and (t_RR, t_LL, t_RL, t_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate = SiC());\n\njulia> transmission_coeffs(12e-6, deg2rad(18), S)\n(0.08647336439281672 - 0.3667267570954972im, 0.07570669303896788 - 0.35120281878473003im, 0.0 + 0.0im, 0.0 + 0.0im)\n\n\n\n\n\ntransmission_coeffs(M; basis=:linear)\n\nCalculate transmission coefficients from M matrix. Returns (tₚₚ, tₛₛ, tₚₛ, tₛₚ) in :linear basis and (t_RR, t_LL, t_RL, t_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), substrate = SiC());\n\njulia> M = GeneralizedTransferMatrixMethod.calculate_structure_M(12e-6, deg2rad(18), S);\n\njulia> transmission_coeffs(M)\n(0.08647336439281672 - 0.3667267570954972im, 0.07570669303896788 - 0.35120281878473003im, 0.0 + 0.0im, 0.0 + 0.0im)\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.calculate_reflection","page":"Public","title":"GeneralizedTransferMatrixMethod.calculate_reflection","text":"calculate_reflection(λ, α, strct; basis=:linear)\n\nCalculate the reflection of a layered structure.\n\nArguments\n\nλ: Wavelength m.\nα: Angle of incidence.\nstrct: Structure of type LayeredStructure.\nbasis=:linear: Returns (Rₚₚ, Rₛₛ, Rₚₛ, Rₛₚ) in :linear basis and (R_RR, R_LL, R_RL, R_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), layers=[MoO₃(d = 1e-6)], substrate = Layer());\n\njulia> calculate_reflection(12.5e-6, deg2rad(23), S)\n(0.19265761641397677, 0.31745983790535026, 0.0, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.calculate_transmission","page":"Public","title":"GeneralizedTransferMatrixMethod.calculate_transmission","text":"calculate_transmission(λ, α, strct; basis=:linear)\n\nCalculate the transmission of a layered structure.\n\nArguments\n\nλ: Wavelength m.\nα: Angle of incidence.\nstrct: Structure of type LayeredStructure.\nbasis=:linear: Returns (Tₚₚ, Tₛₛ, Tₚₛ, Tₛₚ) in :linear basis and (T_RR, T_LL, T_RL, T_LR) in :circular basis.\n\nExamples\n\njulia> S = LayeredStructure(superstrate=Layer(), layers=[MoO₃(d = 1e-6)], substrate = Layer());\n\njulia> calculate_transmission(12.5e-6, deg2rad(23), S)\n(0.31887703646260473, 0.6139558802434731, 0.0, 0.0)\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Exported-types","page":"Public","title":"Exported types","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"Layer\nLayeredStructure","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Layer","page":"Public","title":"GeneralizedTransferMatrixMethod.Layer","text":"struct Layer\n    ϵ::Function = ϵ_vacuum\n    μ::Function = μ_vacuum\n    ξ::Function = ξ_vacuum\n    ζ::Function = ζ_vacuum\n    d::Real = 0\n    θ::Real = 0\n    ϕ::Real = 0\n    ψ::Real = 0\nend\n\nType that represents a layer in a layered structur. Boundary layers have d = 0.\n\nArguments\n\nϵ: Relative permitivity tensor (default: ϵ_vacuum).\nμ: Relative permeability tensor (default: μ_vacuum).\nξ, ζ: Optical rotation tensors (default: ξ_vacuum, ζ_vacuum).\nd: Thickness of the layer [m] (default: 0).\nθ: θ Euler angle [rad] (default: 0).\nϕ: ϕ Euler angle [rad] (default: 0).\nψ: ψ Euler angle [rad] (default: 0).\n\nThe definition of the Euler angles is taken from [1].\n\nReferences\n\n[1]: Yeh, P. Optical Waves in Layered Media. Wiley Series in Pure and Applied Optics. Wiley, 2005.\n\n\n\n\n\n","category":"type"},{"location":"library-public/#GeneralizedTransferMatrixMethod.LayeredStructure","page":"Public","title":"GeneralizedTransferMatrixMethod.LayeredStructure","text":"struct LayeredStructure\n    superstrate::Layer\n    layers::AbstractVector{Layer} = []\n    substrate::Layer\nend\n\nType that represents a layered structure.\n\nArguments\n\nsuperstrate: Superstrate of the structure.\nlayers: List of layers of the structure starting with the layer underneath the         superstrate and ending with the layer above the substrate (default = []).\nsubstrate: Subststrate of the structure.\n\n\n\n\n\n","category":"type"},{"location":"library-public/#Exported-permittivities","page":"Public","title":"Exported permittivities","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"ϵ_vacuum\nμ_vacuum\nξ_vacuum\nζ_vacuum\nϵ_Ag\nϵ_Au\nϵ_SiC\nϵ_MoO₃","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_vacuum","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_vacuum","text":"ϵ_vacuum(λ)\n\nCalculate the relative permittivity of vacuum. Always returns the identity matrix.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.μ_vacuum","page":"Public","title":"GeneralizedTransferMatrixMethod.μ_vacuum","text":"μ_vacuum(λ)\n\nCalculate the relative permeability of vacuum. Always returns the identity matrix.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ξ_vacuum","page":"Public","title":"GeneralizedTransferMatrixMethod.ξ_vacuum","text":"Optical rotation tensor\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ζ_vacuum","page":"Public","title":"GeneralizedTransferMatrixMethod.ζ_vacuum","text":"Optical rotation tensor\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_Ag","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_Ag","text":"ϵ_Ag(λ)\n\nCalculate permittivity tensor of Ag.\n\nArguments\n\nλ: Wavelength m.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_Au","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_Au","text":"ϵ_Au(λ)\n\nCalculate permittivity tensor of Au.\n\nArguments\n\nλ: Wavelength m.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_SiC","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_SiC","text":"ϵ_SiC(λ)\n\nCalculate permittivity tensor of SiC.\n\nArguments\n\nλ: Wavelength m.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.ϵ_MoO₃","page":"Public","title":"GeneralizedTransferMatrixMethod.ϵ_MoO₃","text":"ϵ_MoO₃(λ)\n\nCalculate permittivity tensor of MoO₃.\n\nArguments\n\nλ: Wavelength m.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#Exported-material-layers","page":"Public","title":"Exported material layers","text":"","category":"section"},{"location":"library-public/","page":"Public","title":"Public","text":"Ag\nAu\nSiC\nMoO₃","category":"page"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Ag","page":"Public","title":"GeneralizedTransferMatrixMethod.Ag","text":"Ag(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of Ag using keyword arguments.\n\nArguments\n\nSuitable quantities with units from Unitful also work.\n\nd: Thickness of the layer m (default: 0).\nθ: θ Euler angle rad (default: 0).\nϕ: ϕ Euler angle rad (default: 0).\nψ: ψ Euler angle rad (default: 0).\n\n\n\n\n\nAg(d, θ, ϕ, ψ)\n\nDefine a Layer of Ag.\n\nArguments\n\nd: Thickness of the layer m.\nθ: θ Euler angle rad.\nϕ: ϕ Euler angle rad.\nψ: ψ Euler angle rad.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.Au","page":"Public","title":"GeneralizedTransferMatrixMethod.Au","text":"Au(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of Au using keyword arguments.\n\nArguments\n\nSuitable quantities with units from Unitful also work.\n\nd: Thickness of the layer m (default: 0).\nθ: θ Euler angle rad (default: 0).\nϕ: ϕ Euler angle rad (default: 0).\nψ: ψ Euler angle rad (default: 0).\n\n\n\n\n\nAu(d, θ, ϕ, ψ)\n\nDefine a Layer of Au.\n\nArguments\n\nd: Thickness of the layer m.\nθ: θ Euler angle rad.\nϕ: ϕ Euler angle rad.\nψ: ψ Euler angle rad.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.SiC","page":"Public","title":"GeneralizedTransferMatrixMethod.SiC","text":"SiC(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of SiC using keyword arguments.\n\nArguments\n\nSuitable quantities with units from Unitful also work.\n\nd: Thickness of the layer m (default: 0).\nθ: θ Euler angle rad (default: 0).\nϕ: ϕ Euler angle rad (default: 0).\nψ: ψ Euler angle rad (default: 0).\n\n\n\n\n\nSiC(d, θ, ϕ, ψ)\n\nDefine a Layer of SiC.\n\nArguments\n\nd: Thickness of the layer m.\nθ: θ Euler angle rad.\nϕ: ϕ Euler angle rad.\nψ: ψ Euler angle rad.\n\n\n\n\n\n","category":"function"},{"location":"library-public/#GeneralizedTransferMatrixMethod.MoO₃","page":"Public","title":"GeneralizedTransferMatrixMethod.MoO₃","text":"MoO₃(;d = 0, θ = 0, ϕ = 0, ψ = 0)\n\nDefine a Layer of MoO₃ using keyword arguments.\n\nArguments\n\nSuitable quantities with units from Unitful also work.\n\nd: Thickness of the layer m (default: 0).\nθ: θ Euler angle rad (default: 0).\nϕ: ϕ Euler angle rad (default: 0).\nψ: ψ Euler angle rad (default: 0).\n\n\n\n\n\nMoO₃(d, θ, ϕ, ψ)\n\nDefine a Layer of MoO₃.\n\nArguments\n\nd: Thickness of the layer m.\nθ: θ Euler angle rad.\nϕ: ϕ Euler angle rad.\nψ: ψ Euler angle rad.\n\n\n\n\n\n","category":"function"},{"location":"sic-sphp/#SPhP-resonance-in-6H-SiC-excited-in-the-Otto-geometry","page":"SPhP resonance in 6H-SiC excited in the Otto geometry","title":"SPhP resonance in 6H-SiC excited in the Otto geometry","text":"","category":"section"},{"location":"sic-sphp/","page":"SPhP resonance in 6H-SiC excited in the Otto geometry","title":"SPhP resonance in 6H-SiC excited in the Otto geometry","text":"Reference: Passler, N. C. & Paarmann, A. Generalized 4 × 4 matrix formalism for light propagation in anisotropic stratified media: study of surface phonon polaritons in polar dielectric heterostructures. J. Opt. Soc. Am. B 34, 2128 (2017)","category":"page"},{"location":"sic-sphp/","page":"SPhP resonance in 6H-SiC excited in the Otto geometry","title":"SPhP resonance in 6H-SiC excited in the Otto geometry","text":"📚 Code as Pluto.jl notebook","category":"page"},{"location":"sic-sphp/","page":"SPhP resonance in 6H-SiC excited in the Otto geometry","title":"SPhP resonance in 6H-SiC excited in the Otto geometry","text":"using GeneralizedTransferMatrixMethod\nusing Plots\nusing Unzip\n\n# refractiveindex.info material database\nusing RefractiveIndex\n\n# Import useful predefined units\n# (otherwise one could write, e.g. u\"cm\")\nusing Unitful: cm, μm, °\n\ndefault(\n    lw=3, \n    label=:none,\n    framestyle=:box,\n    grid=false,\n    size = (1200,600),\n    bottom_margin=5Plots.mm,\n    left_margin=5Plots.mm,\n    right_margin=5Plots.mm\n)\n\n# Refractive index of KRS5 taken from refractiveindex.info\nRI_KRS5 = RefractiveMaterial(\"https://refractiveindex.info/?shelf=other&book=TlBr-TlI&page=Rodney\")\n\n# Define KRS5 layer\n@permittivity \"KRS5\" RI_KRS5\n\n# Function to build structures\nS(d_air) = LayeredStructure(\n\tsuperstrate= KRS5(),\n\tlayers = [Layer(d=d_air)],\n\tsubstrate=SiC()\n)\n\n# We are only interested in Rₚₚ, so we write a function to extract it\n# (ₚ can be typed by typing \\_p<tab>)\nfunction Rₚₚ(k, α, gap)\n\tR_PP, _, _, _ = calculate_reflection(k, α, S(gap))\n\tR_PP\nend\n\n# Wavenumbers\nks = (750:0.1:1050)cm^-1\n\n# Air gaps\ngaps = [2, 3.5, 5.5, 7.5]μm\n\nresult = [Rₚₚ(k_i, 30°, g_i) for k_i in ks, g_i in gaps]\n\nplot(\n    ks, result,\n    xlabel = \"Wavenumber\", ylabel = \"Reflectivity\",\n    label = gaps'\n)\n\nsavefig(\"otto-plot.svg\"); # hide\nnothing # hide","category":"page"},{"location":"sic-sphp/","page":"SPhP resonance in 6H-SiC excited in the Otto geometry","title":"SPhP resonance in 6H-SiC excited in the Otto geometry","text":"(Image: )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: header)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The 4 times 4 transfer matrix method was initially introduced by Teitler and Henvis [1] and later popularized by Berreman [2]. This method provides a concise approach for computing the reflection and transmission properties of anisotropic optical materials. By employing a matrix-based formulation, it simplifies the calculation of these parameters for any stack of planar layers and lends itself to numerical implementation. The present package implements the transfer matrix formalism as presented in [3].","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package implements the transfer matrix method for arbitrary relative permittivities epsilon, including non-reciprocal cases. Arbitrary relative permeabilities mu and optical tensors xi and chi are also implemented but not tested.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Notation\nThe notation utilized in both the documentation and the source code closely adheres to the one introduced in [3].","category":"page"},{"location":"#Other-packages","page":"Introduction","title":"Other packages","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The authors [4-6] provide a Python implementation (pyGTM), as well as a Matlab implementation (First version (2019), Updated version (2020)).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Additionally, [7] is a useful resource in understanding how to implement the transfer matrix method and also comes with a Python implementation (tmm).","category":"page"},{"location":"#Upcoming-features","page":"Introduction","title":"Upcoming features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Function to directly calculate the fields within the layers.\nInterface to easily read in tabulated permittivity data.","category":"page"},{"location":"#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Teitler, S. & Henvis, B. W. Refraction in Stratified, Anisotropic Media*. J. Opt. Soc. Am., JOSA 60, 830–834 (1970). \nBerreman, D. W. Optics in Stratified and Anisotropic Media: 4×4-Matrix Formulation. J. Opt. Soc. Am., JOSA 62, 502–510 (1972). \nMackay, T. G. & Lakhtakia, A. The Transfer-Matrix Method in Electromagnetics and Optics. vol. 1 (2020).\nPassler, N. C. & Paarmann, A. Generalized 4 × 4 matrix formalism for light propagation in anisotropic stratified media: study of surface phonon polaritons in polar dielectric heterostructures. J. Opt. Soc. Am. B 34, 2128 (2017). \nPassler, N. C. & Paarmann, A. Generalized 4 × 4 matrix formalism for light propagation in anisotropic stratified media: study of surface phonon polaritons in polar dielectric heterostructures: erratum. J. Opt. Soc. Am. B 36, 3246 (2019). \nPassler, N. C., Jeannin, M. & Paarmann, A. Layer-resolved absorption of light in arbitrarily anisotropic heterostructures. Phys. Rev. B 101, 165425 (2020).\nByrnes, S. J. Multilayer optical calculations. arXiv:1603.02720 (2020).","category":"page"}]
}
